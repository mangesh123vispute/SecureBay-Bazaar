[
    {
        "label": "django.db",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db",
        "description": "django.db",
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "django.conf",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.conf",
        "description": "django.conf",
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "arkapp",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "arkapp",
        "description": "arkapp",
        "detail": "arkapp",
        "documentation": {}
    },
    {
        "label": "views",
        "importPath": "arkapp",
        "description": "arkapp",
        "isExtraImport": true,
        "detail": "arkapp",
        "documentation": {}
    },
    {
        "label": "keys",
        "importPath": "arkapp",
        "description": "arkapp",
        "isExtraImport": true,
        "detail": "arkapp",
        "documentation": {}
    },
    {
        "label": "django.contrib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.contrib",
        "description": "django.contrib",
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "django.contrib.auth.models",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "post_save",
        "importPath": "django.db.models.signals",
        "description": "django.db.models.signals",
        "isExtraImport": true,
        "detail": "django.db.models.signals",
        "documentation": {}
    },
    {
        "label": "receiver",
        "importPath": "django.dispatch",
        "description": "django.dispatch",
        "isExtraImport": true,
        "detail": "django.dispatch",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "NoReverseMatch",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "MyProfile",
        "importPath": "arkapp.views",
        "description": "arkapp.views",
        "isExtraImport": true,
        "detail": "arkapp.views",
        "documentation": {}
    },
    {
        "label": "django.contrib.auth",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "authenticate",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "authenticate",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "authenticate",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "logout",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "login",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "send_mail",
        "importPath": "django.core.mail",
        "description": "django.core.mail",
        "isExtraImport": true,
        "detail": "django.core.mail",
        "documentation": {}
    },
    {
        "label": "send_mail",
        "importPath": "django.core.mail",
        "description": "django.core.mail",
        "isExtraImport": true,
        "detail": "django.core.mail",
        "documentation": {}
    },
    {
        "label": "EmailMultiAlternatives",
        "importPath": "django.core.mail",
        "description": "django.core.mail",
        "isExtraImport": true,
        "detail": "django.core.mail",
        "documentation": {}
    },
    {
        "label": "EmailMessage",
        "importPath": "django.core.mail",
        "description": "django.core.mail",
        "isExtraImport": true,
        "detail": "django.core.mail",
        "documentation": {}
    },
    {
        "label": "BadHeaderError",
        "importPath": "django.core.mail",
        "description": "django.core.mail",
        "isExtraImport": true,
        "detail": "django.core.mail",
        "documentation": {}
    },
    {
        "label": "send_mail",
        "importPath": "django.core.mail",
        "description": "django.core.mail",
        "isExtraImport": true,
        "detail": "django.core.mail",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST_USER",
        "importPath": "ecommerse.settings",
        "description": "ecommerse.settings",
        "isExtraImport": true,
        "detail": "ecommerse.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST",
        "importPath": "ecommerse.settings",
        "description": "ecommerse.settings",
        "isExtraImport": true,
        "detail": "ecommerse.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST_USER",
        "importPath": "ecommerse.settings",
        "description": "ecommerse.settings",
        "isExtraImport": true,
        "detail": "ecommerse.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST_USER",
        "importPath": "ecommerse.settings",
        "description": "ecommerse.settings",
        "isExtraImport": true,
        "detail": "ecommerse.settings",
        "documentation": {}
    },
    {
        "label": "ceil",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "csrf_exempt",
        "importPath": "django.views.decorators.csrf",
        "description": "django.views.decorators.csrf",
        "isExtraImport": true,
        "detail": "django.views.decorators.csrf",
        "documentation": {}
    },
    {
        "label": "Checksum",
        "importPath": "PayTm",
        "description": "PayTm",
        "isExtraImport": true,
        "detail": "PayTm",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "View",
        "importPath": "django.views",
        "description": "django.views",
        "isExtraImport": true,
        "detail": "django.views",
        "documentation": {}
    },
    {
        "label": "LoginRequiredMixin",
        "importPath": "django.contrib.auth.mixins",
        "description": "django.contrib.auth.mixins",
        "isExtraImport": true,
        "detail": "django.contrib.auth.mixins",
        "documentation": {}
    },
    {
        "label": "views",
        "importPath": "arkauth",
        "description": "arkauth",
        "isExtraImport": true,
        "detail": "arkauth",
        "documentation": {}
    },
    {
        "label": "AbstractBaseUser",
        "importPath": "django.contrib.auth.base_user",
        "description": "django.contrib.auth.base_user",
        "isExtraImport": true,
        "detail": "django.contrib.auth.base_user",
        "documentation": {}
    },
    {
        "label": "django.contrib.auth.tokens",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.contrib.auth.tokens",
        "description": "django.contrib.auth.tokens",
        "detail": "django.contrib.auth.tokens",
        "documentation": {}
    },
    {
        "label": "PasswordResetTokenGenerator",
        "importPath": "django.contrib.auth.tokens",
        "description": "django.contrib.auth.tokens",
        "isExtraImport": true,
        "detail": "django.contrib.auth.tokens",
        "documentation": {}
    },
    {
        "label": "PasswordResetTokenGenerator",
        "importPath": "django.contrib.auth.tokens",
        "description": "django.contrib.auth.tokens",
        "isExtraImport": true,
        "detail": "django.contrib.auth.tokens",
        "documentation": {}
    },
    {
        "label": "six",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "six",
        "description": "six",
        "detail": "six",
        "documentation": {}
    },
    {
        "label": "django.contrib.messages",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.contrib.messages",
        "description": "django.contrib.messages",
        "detail": "django.contrib.messages",
        "documentation": {}
    },
    {
        "label": "constants",
        "importPath": "django.contrib.messages",
        "description": "django.contrib.messages",
        "isExtraImport": true,
        "detail": "django.contrib.messages",
        "documentation": {}
    },
    {
        "label": "get_current_site",
        "importPath": "django.contrib.sites.shortcuts",
        "description": "django.contrib.sites.shortcuts",
        "isExtraImport": true,
        "detail": "django.contrib.sites.shortcuts",
        "documentation": {}
    },
    {
        "label": "urlsafe_base64_decode",
        "importPath": "django.utils.http",
        "description": "django.utils.http",
        "isExtraImport": true,
        "detail": "django.utils.http",
        "documentation": {}
    },
    {
        "label": "urlsafe_base64_encode",
        "importPath": "django.utils.http",
        "description": "django.utils.http",
        "isExtraImport": true,
        "detail": "django.utils.http",
        "documentation": {}
    },
    {
        "label": "render_to_string",
        "importPath": "django.template.loader",
        "description": "django.template.loader",
        "isExtraImport": true,
        "detail": "django.template.loader",
        "documentation": {}
    },
    {
        "label": "force_bytes",
        "importPath": "django.utils.encoding",
        "description": "django.utils.encoding",
        "isExtraImport": true,
        "detail": "django.utils.encoding",
        "documentation": {}
    },
    {
        "label": "force_str",
        "importPath": "django.utils.encoding",
        "description": "django.utils.encoding",
        "isExtraImport": true,
        "detail": "django.utils.encoding",
        "documentation": {}
    },
    {
        "label": "DjangoUnicodeDecodeError",
        "importPath": "django.utils.encoding",
        "description": "django.utils.encoding",
        "isExtraImport": true,
        "detail": "django.utils.encoding",
        "documentation": {}
    },
    {
        "label": "mail",
        "importPath": "django.core",
        "description": "django.core",
        "isExtraImport": true,
        "detail": "django.core",
        "documentation": {}
    },
    {
        "label": "View",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "threading",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "threading",
        "description": "threading",
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "signup",
        "importPath": "arkauth.views",
        "description": "arkauth.views",
        "isExtraImport": true,
        "detail": "arkauth.views",
        "documentation": {}
    },
    {
        "label": "static",
        "importPath": "django.conf.urls.static",
        "description": "django.conf.urls.static",
        "isExtraImport": true,
        "detail": "django.conf.urls.static",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "base64",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "base64",
        "description": "base64",
        "detail": "base64",
        "documentation": {}
    },
    {
        "label": "string",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "string",
        "description": "string",
        "detail": "string",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "hashlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "hashlib",
        "description": "hashlib",
        "detail": "hashlib",
        "documentation": {}
    },
    {
        "label": "AES",
        "importPath": "Crypto.Cipher",
        "description": "Crypto.Cipher",
        "isExtraImport": true,
        "detail": "Crypto.Cipher",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "arkapp.migrations.0001_initial",
        "description": "arkapp.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Product',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('product_name', models.CharField(max_length=50)),",
        "detail": "arkapp.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "arkapp.migrations.0002_orders",
        "description": "arkapp.migrations.0002_orders",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('arkapp', '0001_initial'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Orders',\n            fields=[\n                ('order_id', models.AutoField(primary_key=True, serialize=False)),\n                ('items_json', models.CharField(max_length=5000)),",
        "detail": "arkapp.migrations.0002_orders",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "arkapp.migrations.0003_orderupdate",
        "description": "arkapp.migrations.0003_orderupdate",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('arkapp', '0002_orders'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='OrderUpdate',\n            fields=[\n                ('update_id', models.AutoField(primary_key=True, serialize=False)),\n                ('order_id', models.IntegerField(default='')),",
        "detail": "arkapp.migrations.0003_orderupdate",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "arkapp.migrations.0004_profile",
        "description": "arkapp.migrations.0004_profile",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n        ('arkapp', '0003_orderupdate'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Profile',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "arkapp.migrations.0004_profile",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "arkapp.migrations.0005_profile_billing_address_profile_shipping_address",
        "description": "arkapp.migrations.0005_profile_billing_address_profile_shipping_address",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('arkapp', '0004_profile'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='profile',\n            name='billing_address',\n            field=models.CharField(default='', max_length=255),\n        ),",
        "detail": "arkapp.migrations.0005_profile_billing_address_profile_shipping_address",
        "documentation": {}
    },
    {
        "label": "ArkappConfig",
        "kind": 6,
        "importPath": "arkapp.apps",
        "description": "arkapp.apps",
        "peekOfCode": "class ArkappConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'arkapp'\n    def ready(self):\n        import arkapp.signals",
        "detail": "arkapp.apps",
        "documentation": {}
    },
    {
        "label": "UserUpdateForm",
        "kind": 6,
        "importPath": "arkapp.forms",
        "description": "arkapp.forms",
        "peekOfCode": "class UserUpdateForm(forms.ModelForm):\n    class Meta:\n        model = User\n        fields = ['username', 'first_name', 'last_name', 'email']\nclass ProfileUpdateForm(forms.ModelForm):\n    class Meta:\n        model = Profile\n        fields = \"__all__\"",
        "detail": "arkapp.forms",
        "documentation": {}
    },
    {
        "label": "ProfileUpdateForm",
        "kind": 6,
        "importPath": "arkapp.forms",
        "description": "arkapp.forms",
        "peekOfCode": "class ProfileUpdateForm(forms.ModelForm):\n    class Meta:\n        model = Profile\n        fields = \"__all__\"",
        "detail": "arkapp.forms",
        "documentation": {}
    },
    {
        "label": "Product",
        "kind": 6,
        "importPath": "arkapp.models",
        "description": "arkapp.models",
        "peekOfCode": "class Product(models.Model):\n    product_id=models.AutoField\n    product_name=models.CharField(max_length=50)\n    category=models.CharField(max_length=50,default=\"\")\n    subcategroy=models.CharField(max_length=50,default=\"\")\n    price=models.IntegerField(default=0)\n    desc=models.CharField(max_length=300)\n    pub_date=models.DateField()\n    image=models.ImageField(upload_to=\"shop/images\",default=\"\")\n    def __str__(self):",
        "detail": "arkapp.models",
        "documentation": {}
    },
    {
        "label": "Orders",
        "kind": 6,
        "importPath": "arkapp.models",
        "description": "arkapp.models",
        "peekOfCode": "class Orders(models.Model):\n    order_id = models.AutoField(primary_key=True)\n    items_json =  models.CharField(max_length=5000)\n    amount = models.IntegerField(default=0)\n    name = models.CharField(max_length=90)\n    email = models.CharField(max_length=90)\n    address1 = models.CharField(max_length=200)\n    address2 = models.CharField(max_length=200)\n    city = models.CharField(max_length=100)\n    state = models.CharField(max_length=100)",
        "detail": "arkapp.models",
        "documentation": {}
    },
    {
        "label": "OrderUpdate",
        "kind": 6,
        "importPath": "arkapp.models",
        "description": "arkapp.models",
        "peekOfCode": "class OrderUpdate(models.Model):\n    update_id = models.AutoField(primary_key=True)\n    order_id = models.IntegerField(default=\"\")\n    update_desc = models.CharField(max_length=5000)\n    timestamp = models.DateField(auto_now_add=True)\n    def __str__(self):\n        return self.update_desc[0:7] + \"...\"\nclass Profile(models.Model):\n    user = models.OneToOneField(User, on_delete=models.CASCADE)\n    avatar = models.ImageField(",
        "detail": "arkapp.models",
        "documentation": {}
    },
    {
        "label": "Profile",
        "kind": 6,
        "importPath": "arkapp.models",
        "description": "arkapp.models",
        "peekOfCode": "class Profile(models.Model):\n    user = models.OneToOneField(User, on_delete=models.CASCADE)\n    avatar = models.ImageField(\n        default='avatar.png', \n        upload_to='profile_avatars' \n    )\n    shipping_address = models.CharField(max_length=255,default='')\n    billing_address = models.CharField(max_length=255,default='')\n    def __str__(self):\n        return f'{self.user.username} Profile'",
        "detail": "arkapp.models",
        "documentation": {}
    },
    {
        "label": "create_profile",
        "kind": 2,
        "importPath": "arkapp.signals",
        "description": "arkapp.signals",
        "peekOfCode": "def create_profile(sender, instance, created, **kwargs):\n    if created:\n        Profile.objects.create(user=instance)\n@receiver(post_save, sender=User)\ndef save_profile(sender, instance, **kwargs):\n    instance.profile.save()",
        "detail": "arkapp.signals",
        "documentation": {}
    },
    {
        "label": "save_profile",
        "kind": 2,
        "importPath": "arkapp.signals",
        "description": "arkapp.signals",
        "peekOfCode": "def save_profile(sender, instance, **kwargs):\n    instance.profile.save()",
        "detail": "arkapp.signals",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "arkapp.urls",
        "description": "arkapp.urls",
        "peekOfCode": "urlpatterns = [\n    path('',views.home,name=\"index\"),\n    path('purchase/',views.purchase,name=\"purchase\"),\n    path('checkout/',views.checkout,name=\"checkout\"),\n    path('handlerequest/', views.handlerequest, name=\"HandleRequest\"),\n    path('tracker/', views.tracker, name=\"TrackingStatus\"),\n    path('about/', views.about, name=\"about\"),\n    path('send_message/', views.SendMessage, name=\"about\"),\n    path('profile/',MyProfile.as_view(), name=\"profile\"),\n]",
        "detail": "arkapp.urls",
        "documentation": {}
    },
    {
        "label": "MyProfile",
        "kind": 6,
        "importPath": "arkapp.views",
        "description": "arkapp.views",
        "peekOfCode": "class MyProfile(LoginRequiredMixin, View):\n        login_url = '/arkauth/login/'\n        redirect_field_name = 'next'\n        def get(self, request):\n            user_form = UserUpdateForm(instance=request.user)\n            profile_form = ProfileUpdateForm(instance=request.user.profile)\n            context = { \n                'user_form': user_form,\n                'profile_form': profile_form\n            }",
        "detail": "arkapp.views",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": "arkapp.views",
        "description": "arkapp.views",
        "peekOfCode": "def home(request):\n    allprods=[]\n    allprof=Profile.objects.all()\n    catpods=Product.objects.values('category','id')\n    cats={ item['category'] for item in catpods }\n    for cat in cats:\n        prod=Product.objects.filter(category=cat)\n        n=len(prod)\n        nSlides=n//4+ceil((n/4)-(n//4))\n        allprods.append([prod,range(1,nSlides),nSlides])",
        "detail": "arkapp.views",
        "documentation": {}
    },
    {
        "label": "purchase",
        "kind": 2,
        "importPath": "arkapp.views",
        "description": "arkapp.views",
        "peekOfCode": "def purchase(request):\n    allprods=[]\n    catpods=Product.objects.values('category','id')\n    cats={ item['category'] for item in catpods }\n    for cat in cats:\n        prod=Product.objects.filter(category=cat)\n        n=len(prod)\n        nSlides=n//4+ceil((n/4)-(n//4))\n        allprods.append([prod,range(1,nSlides),nSlides])\n    params={'allProds':allprods }",
        "detail": "arkapp.views",
        "documentation": {}
    },
    {
        "label": "checkout",
        "kind": 2,
        "importPath": "arkapp.views",
        "description": "arkapp.views",
        "peekOfCode": "def checkout(request):\n    if not request.user.is_authenticated:\n        messages.warning(request,\"login and try again\")\n        return redirect(\"/arkauth/login\")\n    if request.method==\"POST\":\n        items_json = request.POST.get('itemsJson', '')\n        name = request.POST.get('name', '')\n        amount = request.POST.get('amt')\n        email = request.POST.get('email', '')\n        address1 = request.POST.get('address1', '')",
        "detail": "arkapp.views",
        "documentation": {}
    },
    {
        "label": "handlerequest",
        "kind": 2,
        "importPath": "arkapp.views",
        "description": "arkapp.views",
        "peekOfCode": "def handlerequest(request):\n    # paytm will send you post request here\n    form = request.POST\n    response_dict = {}\n    for i in form.keys():\n        response_dict[i] = form[i]\n        if i == 'CHECKSUMHASH':\n            checksum = form[i]\n    verify = Checksum.verify_checksum(response_dict, MERCHANT_KEY, checksum)\n    if verify:",
        "detail": "arkapp.views",
        "documentation": {}
    },
    {
        "label": "tracker",
        "kind": 2,
        "importPath": "arkapp.views",
        "description": "arkapp.views",
        "peekOfCode": "def tracker(request):\n    if not request.user.is_authenticated:\n        messages.warning(request,\"Login & Try Again\")\n        return redirect('/arkauth/login/')\n    if request.method==\"POST\":\n        orderId = request.POST.get('orderId', '')\n        email = request.POST.get('email', '')\n        try:\n            order = Orders.objects.filter(order_id=orderId, email=email)\n            if len(order)>0:",
        "detail": "arkapp.views",
        "documentation": {}
    },
    {
        "label": "about",
        "kind": 2,
        "importPath": "arkapp.views",
        "description": "arkapp.views",
        "peekOfCode": "def about(request):\n    return render(request, 'about.html')\ndef SendMessage(request):\n    if request.method == 'POST':\n        name = request.POST.get('name')\n        email_from = request.POST.get('email')\n        password = request.POST.get('pass')\n        subject = request.POST.get('subject')\n        message = request.POST.get('message')\n        user = authenticate(request, username=email_from, password=password)",
        "detail": "arkapp.views",
        "documentation": {}
    },
    {
        "label": "SendMessage",
        "kind": 2,
        "importPath": "arkapp.views",
        "description": "arkapp.views",
        "peekOfCode": "def SendMessage(request):\n    if request.method == 'POST':\n        name = request.POST.get('name')\n        email_from = request.POST.get('email')\n        password = request.POST.get('pass')\n        subject = request.POST.get('subject')\n        message = request.POST.get('message')\n        user = authenticate(request, username=email_from, password=password)\n        if user is not None:\n            recipient_list=[settings.EMAIL_HOST_USER]",
        "detail": "arkapp.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "arkauth.migrations.0001_initial",
        "description": "arkauth.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Product',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('product_name', models.CharField(max_length=50)),",
        "detail": "arkauth.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "arkauth.migrations.0002_delete_product",
        "description": "arkauth.migrations.0002_delete_product",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('arkauth', '0001_initial'),\n    ]\n    operations = [\n        migrations.DeleteModel(\n            name='Product',\n        ),\n    ]",
        "detail": "arkauth.migrations.0002_delete_product",
        "documentation": {}
    },
    {
        "label": "ArkauthConfig",
        "kind": 6,
        "importPath": "arkauth.apps",
        "description": "arkauth.apps",
        "peekOfCode": "class ArkauthConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'arkauth'",
        "detail": "arkauth.apps",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "arkauth.urls",
        "description": "arkauth.urls",
        "peekOfCode": "urlpatterns = [\n  path(\"signup/\",views.signup,name=\"signup\"),\n  path(\"login/\",views.loginuser,name=\"login\"),\n  path(\"logout/\",views.logoutuser,name=\"logout\"),\n  path('activate/<uidb64>/<token>',views.ActivateAccountView.as_view(),name=\"activate\"),\n  path('request-reset-email/',views.RequestResetEmailView.as_view(),name=\"request-reset-email\"),  \n  path('set-new-password/<uidb64>/<token>/', views.SetNewPasswordView.as_view(), name='set-new-password'),\n]",
        "detail": "arkauth.urls",
        "documentation": {}
    },
    {
        "label": "TokenGenerator",
        "kind": 6,
        "importPath": "arkauth.utils",
        "description": "arkauth.utils",
        "peekOfCode": "class TokenGenerator(PasswordResetTokenGenerator):\n    def _make_hash_value(self, user, timestamp):\n        return (six.text_type(user.pk)+six.text_type(timestamp)+six.text_type(user.is_active))\ngenerate_token=TokenGenerator()",
        "detail": "arkauth.utils",
        "documentation": {}
    },
    {
        "label": "EmailThread",
        "kind": 6,
        "importPath": "arkauth.views",
        "description": "arkauth.views",
        "peekOfCode": "class EmailThread(threading.Thread):\n    def __init__(self,email_message):\n        self.email_message=email_message\n    def run(self):\n        self.email_message.send()\n# Create your views here.\ndef signup(request):\n    if request.method==\"POST\":\n        email=request.POST['email']\n        password=request.POST['password']",
        "detail": "arkauth.views",
        "documentation": {}
    },
    {
        "label": "ActivateAccountView",
        "kind": 6,
        "importPath": "arkauth.views",
        "description": "arkauth.views",
        "peekOfCode": "class ActivateAccountView(View):\n    def get(self, request, uidb64, token):  # sourcery skip: avoid-builtin-shadow\n        try:\n            id = force_str(urlsafe_base64_decode(uidb64))\n            user = User.objects.get(pk=id)\n            if generate_token.check_token(user, token):  # Make sure you have a valid check_token function\n                user.is_active = True\n                user.save()\n                messages.success(request, \"Account Activated Successfully\")\n                return redirect('/arkauth/login/')",
        "detail": "arkauth.views",
        "documentation": {}
    },
    {
        "label": "RequestResetEmailView",
        "kind": 6,
        "importPath": "arkauth.views",
        "description": "arkauth.views",
        "peekOfCode": "class RequestResetEmailView(View):\n    def get(self,request):\n            return render(request,\"auth/request-reset-email.html\")\n    def post(self,request):\n        email=request.POST[\"email\"]\n        user=User.objects.filter(email=email)   \n        if user.exists():\n            current_site=get_current_site(request)\n            email_subject='[Reset Your Password]'\n            message=render_to_string('auth/reset-user-password.html',{ ",
        "detail": "arkauth.views",
        "documentation": {}
    },
    {
        "label": "SetNewPasswordView",
        "kind": 6,
        "importPath": "arkauth.views",
        "description": "arkauth.views",
        "peekOfCode": "class SetNewPasswordView(View):\n    def get( self,request,uidb64,token):\n        context={\n            'uidb64':uidb64,\n            'token':token\n        }\n        try:\n            user_id=force_str(urlsafe_base64_decode(uidb64))\n            user=User.objects.get(pk=user_id)\n            if not PasswordResetTokenGenerator().check_token(user,token):",
        "detail": "arkauth.views",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": "arkauth.views",
        "description": "arkauth.views",
        "peekOfCode": "def signup(request):\n    if request.method==\"POST\":\n        email=request.POST['email']\n        password=request.POST['password']\n        conform_password=request.POST['password2']\n        if password!=conform_password:\n            messages.warning(request,\"Password is not Matching!\")\n            return render(request,\"auth/signup.html\")\n        try:\n            if User.objects.get(username=email):",
        "detail": "arkauth.views",
        "documentation": {}
    },
    {
        "label": "loginuser",
        "kind": 2,
        "importPath": "arkauth.views",
        "description": "arkauth.views",
        "peekOfCode": "def loginuser(request):\n    if request.method==\"POST\":\n        username=request.POST['email']\n        password=request.POST['password']\n        myuser=authenticate(request,username=username,password=password)\n        if myuser is not None:\n            login(request,myuser)\n            messages.success(request,\"Login in success\")\n            return render(request,\"index.html\")\n        else:",
        "detail": "arkauth.views",
        "documentation": {}
    },
    {
        "label": "logoutuser",
        "kind": 2,
        "importPath": "arkauth.views",
        "description": "arkauth.views",
        "peekOfCode": "def logoutuser(request):\n    logout(request)\n    messages.success(request,\"logout user!\")\n    return redirect(\"/arkauth/login/\")\nclass ActivateAccountView(View):\n    def get(self, request, uidb64, token):  # sourcery skip: avoid-builtin-shadow\n        try:\n            id = force_str(urlsafe_base64_decode(uidb64))\n            user = User.objects.get(pk=id)\n            if generate_token.check_token(user, token):  # Make sure you have a valid check_token function",
        "detail": "arkauth.views",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "ecommerse.asgi",
        "description": "ecommerse.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "ecommerse.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "ecommerse.settings",
        "description": "ecommerse.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-gstcoe&x00rp65!0ai@r64j3x=ak+)0h55n9mifj-*@muju-_y'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [",
        "detail": "ecommerse.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "ecommerse.settings",
        "description": "ecommerse.settings",
        "peekOfCode": "SECRET_KEY = 'django-insecure-gstcoe&x00rp65!0ai@r64j3x=ak+)0h55n9mifj-*@muju-_y'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',",
        "detail": "ecommerse.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "ecommerse.settings",
        "description": "ecommerse.settings",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',",
        "detail": "ecommerse.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "ecommerse.settings",
        "description": "ecommerse.settings",
        "peekOfCode": "ALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'arkapp',",
        "detail": "ecommerse.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "ecommerse.settings",
        "description": "ecommerse.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'arkapp',\n    'arkauth',\n    'crispy_forms',",
        "detail": "ecommerse.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "ecommerse.settings",
        "description": "ecommerse.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\nROOT_URLCONF = 'ecommerse.urls'",
        "detail": "ecommerse.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "ecommerse.settings",
        "description": "ecommerse.settings",
        "peekOfCode": "ROOT_URLCONF = 'ecommerse.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': ['templates'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',",
        "detail": "ecommerse.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "ecommerse.settings",
        "description": "ecommerse.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': ['templates'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "ecommerse.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "ecommerse.settings",
        "description": "ecommerse.settings",
        "peekOfCode": "WSGI_APPLICATION = 'ecommerse.wsgi.application'\n# Database\n# https://docs.djangoproject.com/en/4.2/ref/settings/#databases\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.mysql',\n        'NAME': 'ecommerce',\n        'USER': 'root',\n        'PASSWORD': '1234',\n        'HOST':'localhost',",
        "detail": "ecommerse.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "ecommerse.settings",
        "description": "ecommerse.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.mysql',\n        'NAME': 'ecommerce',\n        'USER': 'root',\n        'PASSWORD': '1234',\n        'HOST':'localhost',\n        'PORT':'3306',\n    }\n}",
        "detail": "ecommerse.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "ecommerse.settings",
        "description": "ecommerse.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "ecommerse.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "ecommerse.settings",
        "description": "ecommerse.settings",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = 'static/'\nSTATICFILES_DIRS=[\n    os.path.join(BASE_DIR,'static')\n]",
        "detail": "ecommerse.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "ecommerse.settings",
        "description": "ecommerse.settings",
        "peekOfCode": "TIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = 'static/'\nSTATICFILES_DIRS=[\n    os.path.join(BASE_DIR,'static')\n]\nMEDIA_URL='/media/'",
        "detail": "ecommerse.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "ecommerse.settings",
        "description": "ecommerse.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = 'static/'\nSTATICFILES_DIRS=[\n    os.path.join(BASE_DIR,'static')\n]\nMEDIA_URL='/media/'\nMEDIA_ROOT=os.path.join(BASE_DIR,'media')",
        "detail": "ecommerse.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "ecommerse.settings",
        "description": "ecommerse.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = 'static/'\nSTATICFILES_DIRS=[\n    os.path.join(BASE_DIR,'static')\n]\nMEDIA_URL='/media/'\nMEDIA_ROOT=os.path.join(BASE_DIR,'media')\n# Default primary key field type",
        "detail": "ecommerse.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "ecommerse.settings",
        "description": "ecommerse.settings",
        "peekOfCode": "STATIC_URL = 'static/'\nSTATICFILES_DIRS=[\n    os.path.join(BASE_DIR,'static')\n]\nMEDIA_URL='/media/'\nMEDIA_ROOT=os.path.join(BASE_DIR,'media')\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nMESSAEG_TAGS={",
        "detail": "ecommerse.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "ecommerse.settings",
        "description": "ecommerse.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nMESSAEG_TAGS={\n    messages.ERROR:'danger'\n}\nEMAIL_USE_TLS = True\nEMAIL_HOST = 'smtp.gmail.com'\nEMAIL_HOST_USER = 'mangesh2003vispute@gmail.com'\nEMAIL_HOST_PASSWORD = 'bxnd nvlx eazh nbcz'\nEMAIL_PORT = 587    \nEMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'",
        "detail": "ecommerse.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_USE_TLS",
        "kind": 5,
        "importPath": "ecommerse.settings",
        "description": "ecommerse.settings",
        "peekOfCode": "EMAIL_USE_TLS = True\nEMAIL_HOST = 'smtp.gmail.com'\nEMAIL_HOST_USER = 'mangesh2003vispute@gmail.com'\nEMAIL_HOST_PASSWORD = 'bxnd nvlx eazh nbcz'\nEMAIL_PORT = 587    \nEMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\nCRISPY_TEMPLATE_PACK = 'bootstrap4'",
        "detail": "ecommerse.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST",
        "kind": 5,
        "importPath": "ecommerse.settings",
        "description": "ecommerse.settings",
        "peekOfCode": "EMAIL_HOST = 'smtp.gmail.com'\nEMAIL_HOST_USER = 'mangesh2003vispute@gmail.com'\nEMAIL_HOST_PASSWORD = 'bxnd nvlx eazh nbcz'\nEMAIL_PORT = 587    \nEMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\nCRISPY_TEMPLATE_PACK = 'bootstrap4'",
        "detail": "ecommerse.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST_USER",
        "kind": 5,
        "importPath": "ecommerse.settings",
        "description": "ecommerse.settings",
        "peekOfCode": "EMAIL_HOST_USER = 'mangesh2003vispute@gmail.com'\nEMAIL_HOST_PASSWORD = 'bxnd nvlx eazh nbcz'\nEMAIL_PORT = 587    \nEMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\nCRISPY_TEMPLATE_PACK = 'bootstrap4'",
        "detail": "ecommerse.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST_PASSWORD",
        "kind": 5,
        "importPath": "ecommerse.settings",
        "description": "ecommerse.settings",
        "peekOfCode": "EMAIL_HOST_PASSWORD = 'bxnd nvlx eazh nbcz'\nEMAIL_PORT = 587    \nEMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\nCRISPY_TEMPLATE_PACK = 'bootstrap4'",
        "detail": "ecommerse.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_PORT",
        "kind": 5,
        "importPath": "ecommerse.settings",
        "description": "ecommerse.settings",
        "peekOfCode": "EMAIL_PORT = 587    \nEMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\nCRISPY_TEMPLATE_PACK = 'bootstrap4'",
        "detail": "ecommerse.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_BACKEND",
        "kind": 5,
        "importPath": "ecommerse.settings",
        "description": "ecommerse.settings",
        "peekOfCode": "EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\nCRISPY_TEMPLATE_PACK = 'bootstrap4'",
        "detail": "ecommerse.settings",
        "documentation": {}
    },
    {
        "label": "CRISPY_TEMPLATE_PACK",
        "kind": 5,
        "importPath": "ecommerse.settings",
        "description": "ecommerse.settings",
        "peekOfCode": "CRISPY_TEMPLATE_PACK = 'bootstrap4'",
        "detail": "ecommerse.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "ecommerse.urls",
        "description": "ecommerse.urls",
        "peekOfCode": "urlpatterns = [\n    path('admin/', admin.site.urls),\n    path('',include('arkapp.urls')),\n    path('arkauth/',include('arkauth.urls')),\n]+static(settings.MEDIA_URL,document_root=settings.MEDIA_ROOT)",
        "detail": "ecommerse.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "ecommerse.wsgi",
        "description": "ecommerse.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "ecommerse.wsgi",
        "documentation": {}
    },
    {
        "label": "generate_checksum",
        "kind": 2,
        "importPath": "PayTm.Checksum",
        "description": "PayTm.Checksum",
        "peekOfCode": "def generate_checksum(param_dict, merchant_key, salt=None):\n    params_string = __get_param_string__(param_dict)\n    salt = salt if salt else __id_generator__(4)\n    final_string = '%s|%s' % (params_string, salt)\n    hasher = hashlib.sha256(final_string.encode())\n    hash_string = hasher.hexdigest()\n    hash_string += salt\n    return __encode__(hash_string, IV, merchant_key)\ndef generate_refund_checksum(param_dict, merchant_key, salt=None):\n    for i in param_dict:",
        "detail": "PayTm.Checksum",
        "documentation": {}
    },
    {
        "label": "generate_refund_checksum",
        "kind": 2,
        "importPath": "PayTm.Checksum",
        "description": "PayTm.Checksum",
        "peekOfCode": "def generate_refund_checksum(param_dict, merchant_key, salt=None):\n    for i in param_dict:\n        if(\"|\" in param_dict[i]):\n            param_dict = {}\n            exit()\n    params_string = __get_param_string__(param_dict)\n    salt = salt if salt else __id_generator__(4)\n    final_string = '%s|%s' % (params_string, salt)\n    hasher = hashlib.sha256(final_string.encode())\n    hash_string = hasher.hexdigest()",
        "detail": "PayTm.Checksum",
        "documentation": {}
    },
    {
        "label": "generate_checksum_by_str",
        "kind": 2,
        "importPath": "PayTm.Checksum",
        "description": "PayTm.Checksum",
        "peekOfCode": "def generate_checksum_by_str(param_str, merchant_key, salt=None):\n    params_string = param_str\n    salt = salt if salt else __id_generator__(4)\n    final_string = '%s|%s' % (params_string, salt)\n    hasher = hashlib.sha256(final_string.encode())\n    hash_string = hasher.hexdigest()\n    hash_string += salt\n    return __encode__(hash_string, IV, merchant_key)\ndef verify_checksum(param_dict, merchant_key, checksum):\n    # Remove checksum",
        "detail": "PayTm.Checksum",
        "documentation": {}
    },
    {
        "label": "verify_checksum",
        "kind": 2,
        "importPath": "PayTm.Checksum",
        "description": "PayTm.Checksum",
        "peekOfCode": "def verify_checksum(param_dict, merchant_key, checksum):\n    # Remove checksum\n    if 'CHECKSUMHASH' in param_dict:\n        param_dict.pop('CHECKSUMHASH')\n    # Get salt\n    paytm_hash = __decode__(checksum, IV, merchant_key)\n    salt = paytm_hash[-4:]\n    calculated_checksum = generate_checksum(param_dict, merchant_key, salt=salt)\n    return calculated_checksum == checksum\ndef verify_checksum_by_str(param_str, merchant_key, checksum):",
        "detail": "PayTm.Checksum",
        "documentation": {}
    },
    {
        "label": "verify_checksum_by_str",
        "kind": 2,
        "importPath": "PayTm.Checksum",
        "description": "PayTm.Checksum",
        "peekOfCode": "def verify_checksum_by_str(param_str, merchant_key, checksum):\n    # Remove checksum\n    #if 'CHECKSUMHASH' in param_dict:\n        #param_dict.pop('CHECKSUMHASH')\n    # Get salt\n    paytm_hash = __decode__(checksum, IV, merchant_key)\n    salt = paytm_hash[-4:]\n    calculated_checksum = generate_checksum_by_str(param_str, merchant_key, salt=salt)\n    return calculated_checksum == checksum\ndef __id_generator__(size=6, chars=string.ascii_uppercase + string.digits + string.ascii_lowercase):",
        "detail": "PayTm.Checksum",
        "documentation": {}
    },
    {
        "label": "IV",
        "kind": 5,
        "importPath": "PayTm.Checksum",
        "description": "PayTm.Checksum",
        "peekOfCode": "IV = \"@@@@&&&&####$$$$\"\nBLOCK_SIZE = 16\ndef generate_checksum(param_dict, merchant_key, salt=None):\n    params_string = __get_param_string__(param_dict)\n    salt = salt if salt else __id_generator__(4)\n    final_string = '%s|%s' % (params_string, salt)\n    hasher = hashlib.sha256(final_string.encode())\n    hash_string = hasher.hexdigest()\n    hash_string += salt\n    return __encode__(hash_string, IV, merchant_key)",
        "detail": "PayTm.Checksum",
        "documentation": {}
    },
    {
        "label": "BLOCK_SIZE",
        "kind": 5,
        "importPath": "PayTm.Checksum",
        "description": "PayTm.Checksum",
        "peekOfCode": "BLOCK_SIZE = 16\ndef generate_checksum(param_dict, merchant_key, salt=None):\n    params_string = __get_param_string__(param_dict)\n    salt = salt if salt else __id_generator__(4)\n    final_string = '%s|%s' % (params_string, salt)\n    hasher = hashlib.sha256(final_string.encode())\n    hash_string = hasher.hexdigest()\n    hash_string += salt\n    return __encode__(hash_string, IV, merchant_key)\ndef generate_refund_checksum(param_dict, merchant_key, salt=None):",
        "detail": "PayTm.Checksum",
        "documentation": {}
    },
    {
        "label": "__pad__",
        "kind": 5,
        "importPath": "PayTm.Checksum",
        "description": "PayTm.Checksum",
        "peekOfCode": "__pad__ = lambda s: s + (BLOCK_SIZE - len(s) % BLOCK_SIZE) * chr(BLOCK_SIZE - len(s) % BLOCK_SIZE)\n__unpad__ = lambda s: s[0:-ord(s[-1])]\ndef __encode__(to_encode, iv, key):\n    # Pad\n    to_encode = __pad__(to_encode)\n    # Encrypt\n    c = AES.new(key.encode('utf-8'), AES.MODE_CBC, iv.encode('utf-8'))\n    to_encode = c.encrypt(to_encode.encode('utf-8'))\n    # Encode\n    to_encode = base64.b64encode(to_encode)",
        "detail": "PayTm.Checksum",
        "documentation": {}
    },
    {
        "label": "__unpad__",
        "kind": 5,
        "importPath": "PayTm.Checksum",
        "description": "PayTm.Checksum",
        "peekOfCode": "__unpad__ = lambda s: s[0:-ord(s[-1])]\ndef __encode__(to_encode, iv, key):\n    # Pad\n    to_encode = __pad__(to_encode)\n    # Encrypt\n    c = AES.new(key.encode('utf-8'), AES.MODE_CBC, iv.encode('utf-8'))\n    to_encode = c.encrypt(to_encode.encode('utf-8'))\n    # Encode\n    to_encode = base64.b64encode(to_encode)\n    return to_encode.decode(\"UTF-8\")",
        "detail": "PayTm.Checksum",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "manage",
        "description": "manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'ecommerse.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "manage",
        "documentation": {}
    }
]